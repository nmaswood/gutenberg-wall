services:
  node:
    build:
      context: .
      args:
        - NODE_ENV=development
    command: npm run debug
    depends_on:
      - db
    ports:
      - "8080:8080"
      - "9229:9229"
      - "9230:9230"
    volumes:
      - .:/opt/node_app/app
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker compose down" and will
      # be saved on host for next build.
      # remember to isntall from the parent directory to the code bind-mount:
      # docker compose exec -w /opt/node_app node npm install --save bower
      - ./package.json:/opt/node_app/package.json
      - ./package-lock.json:/opt/node_app/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_app/node_modules location.
      - notused:/opt/node_app/app/node_modules

  db:
    image: postgres:17.0-alpine3.20
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: gutenberg
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  notused: